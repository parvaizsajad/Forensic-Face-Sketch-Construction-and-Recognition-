/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.mycompany.thirdeye_facematch;

import com.amazonaws.AmazonServiceException;
import com.amazonaws.SdkClientException;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.rekognition.AmazonRekognition;
import com.amazonaws.services.rekognition.AmazonRekognitionClientBuilder;
import com.amazonaws.services.rekognition.model.AgeRange;
import com.amazonaws.services.rekognition.model.AmazonRekognitionException;
import com.amazonaws.services.rekognition.model.Attribute;
import com.amazonaws.services.rekognition.model.DetectFacesRequest;
import com.amazonaws.services.rekognition.model.DetectFacesResult;
import com.amazonaws.services.rekognition.model.FaceDetail;
import com.amazonaws.services.rekognition.model.FaceMatch;
import com.amazonaws.services.rekognition.model.FaceRecord;
import com.amazonaws.services.rekognition.model.IndexFacesRequest;
import com.amazonaws.services.rekognition.model.IndexFacesResult;
import com.amazonaws.services.rekognition.model.S3Object;
import com.amazonaws.services.rekognition.model.SearchFacesByImageRequest;
import com.amazonaws.services.rekognition.model.SearchFacesByImageResult;
import com.amazonaws.services.s3.AmazonS3;
import com.amazonaws.services.s3.AmazonS3ClientBuilder;
import com.amazonaws.services.s3.model.GetObjectRequest;
import com.amazonaws.services.s3.model.ObjectMetadata;
import com.amazonaws.services.s3.model.PutObjectRequest;
import com.amazonaws.services.s3.model.S3ObjectInputStream;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import static com.mycompany.thirdeye_facematch.collection_add_image.bucket;
import static com.mycompany.thirdeye_facematch.collection_add_image.collectionId;
import static com.mycompany.thirdeye_facematch.collection_add_image.photo;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.URL;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.commons.io.FileUtils;

/**
 *
 * @author Akash Sahu
 */
public class face_rekognition extends javax.swing.JFrame {

    public face_rekognition() {
        initComponents();
        sketch_path.setVisible(false);
        match_path.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sketch = new javax.swing.JLabel();
        match = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        open_sketch = new javax.swing.JButton();
        upload_sketch = new javax.swing.JButton();
        find_match = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        match_properties = new javax.swing.JTextArea();
        match_similarity = new javax.swing.JLabel();
        jSeparator2 = new javax.swing.JSeparator();
        sketch_path = new javax.swing.JTextField();
        match_path = new javax.swing.JTextField();
        ImageIndex = new javax.swing.JButton();
        back_window = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        sketch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        match.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        open_sketch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        open_sketch.setForeground(new java.awt.Color(102, 0, 153));
        open_sketch.setText("OPEN SKETCH");
        open_sketch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                open_sketchActionPerformed(evt);
            }
        });

        upload_sketch.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        upload_sketch.setForeground(new java.awt.Color(102, 0, 153));
        upload_sketch.setText("UPLOAD SKETCH");
        upload_sketch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upload_sketchActionPerformed(evt);
            }
        });

        find_match.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        find_match.setForeground(new java.awt.Color(102, 0, 153));
        find_match.setText("FIND MATCH");
        find_match.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                find_matchActionPerformed(evt);
            }
        });

        match_properties.setEditable(false);
        match_properties.setColumns(20);
        match_properties.setRows(5);
        jScrollPane1.setViewportView(match_properties);

        match_similarity.setFont(new java.awt.Font("Roboto", 1, 18)); // NOI18N
        match_similarity.setForeground(new java.awt.Color(0, 204, 0));

        match_path.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                match_pathActionPerformed(evt);
            }
        });

        ImageIndex.setText("IndexImage");
        ImageIndex.setToolTipText("");
        ImageIndex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImageIndexActionPerformed(evt);
            }
        });

        back_window.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        back_window.setForeground(new java.awt.Color(102, 0, 153));
        back_window.setText("BACK");
        back_window.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_windowActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 2, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 153));
        jLabel1.setText("Forensic Face Sketch Construction and Recognition");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 1075, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(8, 8, 8))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(match_similarity, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(273, 273, 273))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(open_sketch, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(upload_sketch, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(find_match, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(33, 33, 33)
                                .addComponent(back_window, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(106, 106, 106))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(sketch, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(match, javax.swing.GroupLayout.PREFERRED_SIZE, 334, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(348, 348, 348)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(sketch_path, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(match_path, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jSeparator2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1115, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ImageIndex, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(241, 241, 241)))
                .addContainerGap(218, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(ImageIndex))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(match_similarity, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 394, Short.MAX_VALUE)
                        .addGap(18, 18, 18))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(sketch, javax.swing.GroupLayout.DEFAULT_SIZE, 406, Short.MAX_VALUE)
                            .addComponent(match, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(sketch_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(match_path, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(back_window, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(upload_sketch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(open_sketch, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(find_match, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(207, 207, 207))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents
AgeRange ar;
    // OPEN SKETCH AND VIEW IMAGE AND PATH
    private void open_sketchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_open_sketchActionPerformed
        JFileChooser fileChooser = new JFileChooser("C:\\Users\\Parva\\OneDrive\\Desktop\\IDE Eecutes\\JAVA\\ThirdEye\\Project Code (forensic face sketch)\\ThirdEye_FaceMatch\\src\\main\\java\\com\\mycompany\\thirdeye_facematch\\sketches"); 
        //Limit type of file name extensions supported. 
        FileNameExtensionFilter filter = new FileNameExtensionFilter("4 Extensions Supported", "jpg", "png", "jpeg", "gif"); 
        fileChooser.setFileFilter(filter); 
        int selected = fileChooser.showOpenDialog(null); 
        
        //check if open button has been clicked. 
        if (selected == JFileChooser.APPROVE_OPTION) { 
            File file = fileChooser.getSelectedFile(); 
            
            //Get Path of the selected image.
            String getselectedImage = file.getAbsolutePath(); 
            
            //Display image path on Message Dialog
            JOptionPane.showMessageDialog(null, "Selected Image Path is - \n" + getselectedImage); 
            ImageIcon imIco = new ImageIcon(getselectedImage);
            sketch_path.setText(getselectedImage);
            
            
            //make image fit on jlabel.
            Image imFit = imIco.getImage(); 
            Image imgFit = imFit.getScaledInstance(sketch.getWidth(), sketch.getHeight(), Image.SCALE_SMOOTH);
            sketch.setIcon(new ImageIcon(imgFit));
        }        
    }//GEN-LAST:event_open_sketchActionPerformed
    private void back_windowActionPerformed(java.awt.event.ActionEvent evt){
        ffff f=new ffff();
        f.setVisible(true);
        this.dispose();
    }
    //UPLOAD THE SKETCH TO S3 BUCKET TO FIND A MATCH FROM AWS COLLECTION
    private void upload_sketchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upload_sketchActionPerformed
        Regions clientRegion = Regions.US_WEST_2;
        String bucketName = "parvaiz188";
        //String stringObjKeyName = "stringkey";
        String fileObjKeyName = "test.jpg"; //File name to be shown in S3 Bucket
        String fileName = sketch_path.getText();

        try {
            //This code expects that you have AWS credentials set up per:
            // https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                    .withRegion(clientRegion)
                    .build();


            // Upload a file as a new object with ContentType and title specified.
            PutObjectRequest request = new PutObjectRequest(bucketName, fileObjKeyName, new File(fileName));
            ObjectMetadata metadata = new ObjectMetadata();
            metadata.setContentType("plain/text");
            metadata.addUserMetadata("title", "someTitle");
            request.setMetadata(metadata);
            s3Client.putObject(request);
            
            JOptionPane.showMessageDialog(null, "Sketch Uploaded Successfully");
            
            match_path.setText(null); //Clears the old path data of the image 
            match.setIcon(null); //Clears the Old Matched Image
            match_similarity.setText(null); //Clears the Similarity Percentage
            match_properties.setText(null);
            
        } catch (AmazonServiceException e) {
            // The call was transmitted successfully, but Amazon S3 couldn't process 
            // it, so it returned an error response.
            JOptionPane.showMessageDialog(null, "The Sketch could not been Uploaded, Try Again \n");
        } catch (SdkClientException e) {
            // Amazon S3 couldn't be contacted for a response, or the client
            // couldn't parse the response from Amazon S3.
            JOptionPane.showMessageDialog(null, "The Sketch could not been Uploaded, Try Again \n");
        }
    }//GEN-LAST:event_upload_sketchActionPerformed

    //FIND MATCH FROM THE AWS COLLECTION AND SHOW RESULTS
    private void find_matchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_find_matchActionPerformed
        String collectionId = "Records1";
        String bucket = "parvaiz188";
        String photo = "test.jpg";
       
        AmazonRekognition rekognitionClient = AmazonRekognitionClientBuilder.standard().withRegion(Regions.US_WEST_2).build();
        AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                    .withRegion(Regions.US_WEST_2)
                    
                    .build();
        ObjectMapper objectMapper = new ObjectMapper();
        
        // Get an image object from S3 bucket.
        com.amazonaws.services.rekognition.model.Image image=new com.amazonaws.services.rekognition.model.Image()
                .withS3Object(new S3Object()
                        .withBucket(bucket)
                        .withName(photo));
        //
          AgeRange ageRange;
        //detetc face
        DetectFacesRequest request1 = new DetectFacesRequest()
         .withImage(new com.amazonaws.services.rekognition.model.Image()
            .withS3Object(new S3Object()
               .withName(photo)
               .withBucket(bucket)))
         .withAttributes(Attribute.ALL);
        // Search collection for faces similar to the largest face in the image.
        SearchFacesByImageRequest searchFacesByImageRequest = new SearchFacesByImageRequest()
                .withCollectionId(collectionId)
                .withImage(image)
                .withFaceMatchThreshold(50F)
                .withMaxFaces(5);
        
        SearchFacesByImageResult searchFacesByImageResult = 
                 rekognitionClient.searchFacesByImage(searchFacesByImageRequest);
       //detect face 
  DetectFacesResult result1 = rekognitionClient.detectFaces(request1);
         List < FaceDetail > faceDetails = result1.getFaceDetails();
         
         for (FaceDetail face2: faceDetails) {
            if (request1.getAttributes().contains("ALL")) {
                ageRange = face2.getAgeRange();
                ar=ageRange;
               System.out.println("The detected face is estimated to be between "
                  + ageRange.getLow().toString() + " and " + ageRange.getHigh().toString()
                  + " years old.");
               System.out.println("Here's the complete set of attributes:");
            }
         }
         //detect face
        List < FaceMatch > faceImageMatches = searchFacesByImageResult.getFaceMatches();

        faceImageMatches.forEach((FaceMatch face) -> {
            
            try {
                //detectface
              
                com.amazonaws.services.s3.model.S3Object object = s3Client.getObject(new GetObjectRequest(bucket, face.getFace().getExternalImageId()));
         
               System.out.println(objectMapper.writerWithDefaultPrettyPrinter()
                        .writeValueAsString(face));
               
               match_path.setText(face.getFace().getExternalImageId()); //Used for verifing and No Match
               
               //Display the Similarity Percentage on the Screen
               match_similarity.setText("SIMILARITY : "+face.getSimilarity()); 
               
               // Display Properties
               match_properties.setText("******************************************** \n"+
                                        "FACE MATCHED \n"+
                                        "******************************************** \n"+
                                        "\n"+
                                        "\n"+
                                        "Name in database: "+face.getFace().getExternalImageId() + "\n" +
                                        "\n"+
                                        "\n"+
                                        "Similarity: "+face.getSimilarity() + "\n" +
                                        "\n"+
                                        "\n"+
                                        "Confidence: "+face.getFace().getConfidence() + "\n" +
                                                "\n"+
                                        "\n"
                       +"The age is between "
                  + ar.getLow().toString() + " and " + ar.getHigh().toString()
                  + " years."
               
               );
                    
               // Display Matched Images in the JLABEL 
               String path = "https://parvaiz188.s3-us-west-2.amazonaws.com/"+face.getFace().getExternalImageId();
               System.out.println("Get Image from " + path);
               try {
                 URL url = new URL(path);
                    // Get a range of bytes from an object and print the bytes.
             ImageIcon imIco = new ImageIcon(url);
                     Image imFit = imIco.getImage(); 
            Image imgFit = imFit.getScaledInstance(sketch.getWidth(), sketch.getHeight(), Image.SCALE_SMOOTH);
            match.setIcon(new ImageIcon(imgFit));
                // match.setIcon(new ImageIcon(path));
                   System.out.println("the url is"+url);
               } catch (IOException e) {
                  
               }
            } catch (JsonProcessingException ex) {
                Logger.getLogger(face_rekognition.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        if (match_path.getText().isEmpty()) { // IF THE SKETCH DOES NOT MATCH
            System.out.println("NO MATCH FOUND");
            JOptionPane.showMessageDialog(null, "No Match Found in the Database !! \n");
            match.setIcon(null);
        }
    }//GEN-LAST:event_find_matchActionPerformed

    private void match_pathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_match_pathActionPerformed
       
        System.out.println("");// TODO add your handling code here:
    }//GEN-LAST:event_match_pathActionPerformed

    private void ImageIndexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImageIndexActionPerformed
        // TODO add your handling code here:
          JFileChooser fileChooser = new JFileChooser("C:\\Users\\Parva\\OneDrive\\Desktop\\IDE Eecutes\\JAVA\\ThirdEye\\newFaces"); 
        //Limit type of file name extensions supported. 
        FileNameExtensionFilter filter = new FileNameExtensionFilter("4 Extensions Supported", "jpg", "png", "jpeg", "gif"); 
        fileChooser.setFileFilter(filter); 
        int selected = fileChooser.showOpenDialog(null); 
        
        //check if open button has been clicked. 
        if (selected == JFileChooser.APPROVE_OPTION) { 
            File file = fileChooser.getSelectedFile(); 
            
            //Get Path of the selected image.
            String photo = file.getName();
            
            //upload the image
             Regions clientRegion = Regions.US_WEST_2;
        String bucketName = "parvaiz188";
        //String stringObjKeyName = "stringkey";
        String fileObjKeyName = photo; //File name to be shown in S3 Bucket
        //String fileName = sketch_path.getText();

        try {
            //This code expects that you have AWS credentials set up per:
            // https://docs.aws.amazon.com/sdk-for-java/v1/developer-guide/setup-credentials.html
            AmazonS3 s3Client = AmazonS3ClientBuilder.standard()
                    .withRegion(clientRegion)
                    .build();


            // Upload a file as a new object with ContentType and title specified.
            PutObjectRequest request = new PutObjectRequest(bucketName, fileObjKeyName, file);
        
            s3Client.putObject(request);
            
            JOptionPane.showMessageDialog(null, "Sketch Uploaded Successfully");
        }catch(Exception e){
                  System.out.println("can not upload");  
                    }
        //index the image
        
          AmazonRekognition rekognitionClient = AmazonRekognitionClientBuilder.standard().withRegion(Regions.US_WEST_2).build();

        com.amazonaws.services.rekognition.model.Image image = new com.amazonaws.services.rekognition.model.Image()
                .withS3Object(new S3Object()
                .withBucket(bucket)
                .withName(photo));
        
        IndexFacesRequest indexFacesRequest = new IndexFacesRequest()
                .withImage(image)
                .withCollectionId(collectionId)
                .withExternalImageId(photo)
                .withDetectionAttributes("DEFAULT");

        IndexFacesResult indexFacesResult = rekognitionClient.indexFaces(indexFacesRequest);
        
        System.out.println("Results for " + photo);
        System.out.println("Faces indexed:");
        List<FaceRecord> faceRecords = indexFacesResult.getFaceRecords();
        for (FaceRecord faceRecord : faceRecords) {
            System.out.println("  Face ID: " + faceRecord.getFace().getFaceId());
            System.out.println("  Location:" + faceRecord.getFaceDetail().getBoundingBox().toString());
               match_similarity.setText("indexed : "+photo+" successfully");
        }
    }//GEN-LAST:event_ImageIndexActionPerformed
    }
    /*
    private void back_windowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_windowActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_back_windowActionPerformed

    */
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
      

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new face_rekognition().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ImageIndex;
    private javax.swing.JButton back_window;
    private javax.swing.JButton find_match;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JLabel match;
    private javax.swing.JTextField match_path;
    private javax.swing.JTextArea match_properties;
    private javax.swing.JLabel match_similarity;
    private javax.swing.JButton open_sketch;
    private javax.swing.JLabel sketch;
    private javax.swing.JTextField sketch_path;
    private javax.swing.JButton upload_sketch;
    // End of variables declaration//GEN-END:variables
}
